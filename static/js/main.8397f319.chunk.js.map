{"version":3,"sources":["components/CalendarHeader/CalendarHeader.tsx","components/CalendarDay/CalendarDay.tsx","utils/fetchClient.ts","components/NewEventForm/NewEventForm.tsx","api/events.ts","components/Calendar/Calendar.tsx","App.tsx","index.tsx"],"names":["CalendarHeader","today","isFormShown","onFormShown","onNextMonth","onPrevMonth","onToday","className","type","onClick","format","CalendarDay","day","isWeekend","isCurrentDay","dayItem","moment","isSame","classNames","client","get","JSON","parse","localStorage","getItem","post","data","events","setItem","stringify","delete","eventCreatedDate","newArrayOfevents","filter","event","createdAt","patch","newData","currentEvent","find","newevents","NewEventForm","selectedEvent","useState","title","setTitle","description","setDescription","date","setDate","time","setTime","htmlFor","name","required","placeholder","value","onChange","target","aria-label","icon","faTrashCan","disabled","newEvent","Calendar","setToday","setIsFormShown","setSelectedEvent","updateLocale","week","dow","clone","startOf","subtract","daysArray","Array","map","add","prev","onSelectedEvent","unix","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8397f319.chunk.js","sourcesContent":["import React from 'react';\nimport { Moment } from 'moment';\n\ntype Props = {\n  today: Moment;\n  isFormShown: boolean;\n  onFormShown: (isFormShown: boolean) => void;\n  onNextMonth: () => void;\n  onPrevMonth: () => void;\n  onToday: () => void;\n};\n\nexport const CalendarHeader: React.FC<Props> = ({\n  today,\n  isFormShown,\n  onFormShown,\n  onNextMonth,\n  onPrevMonth,\n  onToday,\n}) => {\n  return (\n    <div className=\"content is-justify-content-space-between\">\n      <div className=\"container\">\n        <button\n          type=\"button\"\n          className=\"button is-link is-outlined\"\n          onClick={() => {\n            onFormShown(!isFormShown);\n          }}\n        >\n          +\n        </button>\n        <div className=\"switcher__container\">\n          <button\n            type=\"button\"\n            className=\"button is-primary is-outlined\"\n            onClick={onToday}\n          >\n            Today\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button is-primary is-outlined\"\n            onClick={onPrevMonth}\n          >\n            {'<'}\n          </button>\n          <h2 className=\"subtitle is-4\">\n            {today.format('MMMM')}\n            &nbsp;\n            {today.format('YYYY')}\n          </h2>\n          <button\n            type=\"button\"\n            className=\"button is-primary is-outlined\"\n            onClick={onNextMonth}\n          >\n            {'>'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport moment, { Moment } from 'moment';\nimport { CalendarEvent } from '../../types/CalendarEvent';\n// import { getAll } from '../../api/events';\n\ntype Props = {\n  day: Moment;\n  isWeekend: boolean;\n  onFormShown: (isFormShown: boolean) => void;\n  onSelectedEvent: (selectedEvent: CalendarEvent | null) => void;\n};\n\nexport const CalendarDay: React.FC<Props> = ({\n  day,\n  isWeekend,\n  // onFormShown,\n  // onSelectedEvent,\n}) => {\n  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  // const getEvents = () => {\n  //   const events: CalendarEvent[] = getAll();\n\n  //   return events;\n  // };\n\n  // const events = getEvents();\n\n  // const currentEvents = events.filter((event) => day.id === event.createdAt);\n  const isCurrentDay = (dayItem: Moment) => moment().isSame(dayItem, 'day');\n\n  return (\n    <article\n      className={classNames('calendar__cell', {\n        'is-weekend': isWeekend === true,\n      })}\n    >\n      <div className=\"cell__row\">\n        <p\n          className={classNames('week__day', {\n            'has-text-danger': isCurrentDay(day) === true,\n          })}\n        >\n          {weekDays[day.day()]}\n        </p>\n        <p\n          className={classNames('day__number', {\n            'has-text-danger': isCurrentDay(day) === true,\n          })}\n        >\n          {day.format('D')}\n        </p>\n      </div>\n      <div className=\"box\">\n        {/* {currentEvents.map((event) => (\n            <span\n              aria-label=\"Save\"\n              role=\"textbox\"\n              key={event.createdAt}\n              tabIndex={0}\n              onClick={() => {\n                onFormShown(true);\n                onSelectedEvent(event);\n              }}\n              onKeyPress={() => {\n                onFormShown(true);\n                onSelectedEvent(event);\n              }}\n            >\n              {event.title}\n              My event\n            </span>\n          ))} */}\n      </div>\n    </article>\n  );\n};\n","import { CalendarEvent } from '../types/CalendarEvent';\n\nexport const client = {\n  get: () => JSON.parse(localStorage.getItem('events') || '[]'),\n  post: (data: CalendarEvent) => {\n    const events: CalendarEvent[] = client.get();\n\n    localStorage.setItem('events', JSON.stringify([...events, data]));\n  },\n  delete: (eventCreatedDate: string) => {\n    const events: CalendarEvent[] = client.get();\n\n    const newArrayOfevents = events.filter(\n      (event) => event.createdAt !== eventCreatedDate,\n    );\n\n    localStorage.setItem('events', JSON.stringify([newArrayOfevents]));\n  },\n  patch: (newData: CalendarEvent) => {\n    const events: CalendarEvent[] = client.get();\n\n    const currentEvent = events.find(\n      (event) => newData.createdAt === event.createdAt,\n    );\n\n    const newevents = events.filter(\n      (event) => event.createdAt !== currentEvent?.createdAt,\n    );\n\n    localStorage.setItem('events', JSON.stringify([...newevents, newData]));\n  },\n};\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashCan } from '@fortawesome/free-regular-svg-icons';\nimport { addOne, updateOne } from '../../api/events';\nimport { CalendarEvent } from '../../types/CalendarEvent';\n\ntype Props = {\n  selectedEvent: CalendarEvent | null;\n  onFormShown: (isFormShown: boolean) => void;\n};\n\nexport const NewEventForm: React.FC<Props> = ({\n  selectedEvent,\n  onFormShown,\n}) => {\n  const [title, setTitle] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [date, setDate] = useState<string>('');\n  const [time, setTime] = useState<string>('');\n\n  const handleSubmit = () => {\n    const newEvent: CalendarEvent = {\n      createdAt: moment().format('DD.MM.YYYY HH:MM'),\n      title,\n      description,\n      date,\n      time,\n    };\n\n    if (!selectedEvent) {\n      addOne(newEvent);\n    } else {\n      updateOne({\n        ...selectedEvent,\n        title,\n        date,\n        time,\n        description,\n      });\n    }\n\n    onFormShown(false);\n  };\n\n  return (\n    <div className=\"event event__container\">\n      <form className=\"box event__form\">\n        <div className=\"event__title\">\n          <h2 className=\"subtitle is-3\">Add new idea item</h2>\n          {selectedEvent && <p>{`Created at ${selectedEvent?.createdAt}`}</p>}\n\n          <button\n            onClick={() => onFormShown(false)}\n            type=\"button\"\n            className=\"button is-danger button__close\"\n          >\n            X\n          </button>\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"title\" className=\"label\">\n            Title*:\n            <div className=\"control\">\n              <input\n                name=\"title\"\n                className=\"input\"\n                type=\"text\"\n                required\n                placeholder=\"Title goes here\"\n                value={title}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => (\n                  setTitle(event.target.value)\n                )}\n              />\n            </div>\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"description\" className=\"label\">\n            Description:\n            <div className=\"control\">\n              <textarea\n                name=\"description\"\n                className=\"input description-text\"\n                placeholder=\"Description\"\n                value={description}\n                onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => (\n                  setDescription(event.target.value)\n                )}\n              />\n            </div>\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"title\" className=\"label\">\n            Date*:\n            <div className=\"control event__date-picker\">\n              <input\n                type=\"date\"\n                required\n                className=\"input event__dateField\"\n                value={date}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => (\n                  setDate(event.target.value)\n                )}\n              />\n\n              <input\n                type=\"time\"\n                required\n                className=\"input event__timeField\"\n                value={date}\n                onChange={(event) => setTime(event.target.value)}\n              />\n            </div>\n          </label>\n        </div>\n\n        {/* {selectedEvent && ( */}\n\n        <div className=\"save-button__container\">\n          <button\n            aria-label=\"Save\"\n            type=\"submit\"\n            className=\"button is-danger is-outlined button__delete\"\n            // onClick={() => deleteOne(selectedEvent?.createdAt)}\n          >\n            <FontAwesomeIcon icon={faTrashCan} />\n          </button>\n          {/* )} */}\n\n          <button\n            type=\"submit\"\n            className=\"button is-success is-outlined button__save\"\n            disabled={!title || !date}\n            onClick={handleSubmit}\n          >\n            Save\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { CalendarEvent } from '../types/CalendarEvent';\nimport { client } from '../utils/fetchClient';\n\nexport function getAll() {\n  return client.get();\n}\n\nexport function addOne(data: CalendarEvent) {\n  return client.post(data);\n}\n\nexport function deleteOne(eventCreatedDate: string) {\n  return client.delete(eventCreatedDate);\n}\n\nexport function updateOne(newData: CalendarEvent) {\n  return client.patch(newData);\n}\n","/* eslint-disable react/no-array-index-key */\nimport React, { useState } from 'react';\nimport moment, { Moment } from 'moment';\nimport { CalendarEvent } from '../../types/CalendarEvent';\n\nimport { CalendarHeader } from '../CalendarHeader';\nimport { CalendarDay } from '../CalendarDay';\nimport { NewEventForm } from '../NewEventForm';\n\nexport const Calendar: React.FC = () => {\n  const [today, setToday] = useState<Moment>(moment());\n  // const [year, setYear] = useState<Moment>(moment());\n  // const [month, setMonth] = useState<Moment>(moment());\n  // const [selectedDay, setSelectedDay] = useState<Day | null>(null);\n  const [isFormShown, setIsFormShown] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n\n  moment.updateLocale('en', { week: { dow: 1 } });\n  const startDay: Moment = today.clone().startOf('month').startOf('week');\n  const day: Moment = startDay.clone().subtract(7, 'day');\n  const totalDays = 42;\n  const daysArray: Moment[] = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  // const isCurrentDay = (dayCell: Day) => {\n  //   return (\n  //     moment().format('YYYY M D')\n  //     === `${dayCell.year} ${dayCell.month} ${dayCell.numberOfDay}`\n  //   );\n  // };\n\n  const handlePrevMonth = () => setToday(prev => prev.clone().subtract(1, 'month'));\n  const handleToday = () => setToday(moment());\n  const handleNextMonth = () => setToday(prev => prev.clone().add(1, 'month'));\n\n  // const [method, setMethod] = useState(null);\n  // const [event, setEvent] = useState(null);\n\n  // const [events, setEvents] = useState([]);\n  // const startDayQuery = startDay.clone().format('X');\n  // const endDayQuery = startDay.clone().add(totalDays, 'days').format('X');\n\n  // const openFormHandler = (methodName, eventForUpdate, dayItem) => {\n  //   setEvent(eventForUpdate || { ...defaultEvent, date: dayItem.format('X') });\n  //   setMethod(methodName);\n  // };\n\n  // const openModalFormHandler = (methodName, eventForUpdate, dayItem) => {\n  //   setShowForm(true);\n  //   openFormHandler(methodName, eventForUpdate, dayItem);\n  // };\n\n  // const cancelButtonHandler = () => {\n  //   setShowForm(false);\n  //   setEvent(null);\n  // };\n\n  // const changeEventHandler = (text, field) => {\n  //   setEvent((prevState) => ({\n  //     ...prevState,\n  //     [field]: text,\n  //   }));\n  // };\n\n  // const endDay: Moment = moment().endOf('month').endOf('week');\n\n  // const calendar: Moment[] = [];\n\n  // while (!day.isAfter(endDay)) {\n  //   calendar.push(day.clone());\n  //   day.add(1, 'day');\n  // }\n\n  return (\n    <section className=\"section\">\n      <div className=\"calendar__container\">\n        <h1 className=\"title is-1\">Welcome to my calendar app!</h1>\n\n        {isFormShown && (\n          <NewEventForm\n            selectedEvent={selectedEvent}\n            onFormShown={setIsFormShown}\n          />\n        )}\n\n        <div className=\"calendar__header\">\n          <CalendarHeader\n            today={today}\n            isFormShown={isFormShown}\n            onFormShown={setIsFormShown}\n            onNextMonth={handleNextMonth}\n            onPrevMonth={handlePrevMonth}\n            onToday={handleToday}\n          />\n        </div>\n\n        <div className=\"calendar__body\">\n          {daysArray.map((dayItem) => (\n            <CalendarDay\n              key={dayItem.unix()}\n              day={dayItem}\n              isWeekend={dayItem.day() === 6 || dayItem.day() === 0}\n              onFormShown={setIsFormShown}\n              onSelectedEvent={setSelectedEvent}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport './App.scss';\n\nimport { Calendar } from './components/Calendar';\n\nexport const App: React.FC = () => {\n  return (\n    <main className=\"main\">\n      <div className=\"main__container\">\n        <Calendar />\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}