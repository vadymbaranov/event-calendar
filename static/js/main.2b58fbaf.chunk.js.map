{"version":3,"sources":["components/CalendarHeader/CalendarHeader.tsx","utils/fetchClient.ts","components/CalendarDay/CalendarDay.tsx","api/events.ts","components/NewEventForm/NewEventForm.tsx","components/Calendar/Calendar.tsx","App.tsx","index.tsx"],"names":["CalendarHeader","isFormShown","onFormShown","onNextMonth","onPrevMonth","onToday","className","type","onClick","client","get","JSON","parse","localStorage","getItem","post","data","events","setItem","stringify","delete","eventCreatedDate","newArrayOfevents","filter","event","createdAt","patch","newData","currentEvent","find","newevents","CalendarDay","day","onSelectedEvent","dayNumber","weekNumber","currentEvents","id","classNames","map","aria-label","role","tabIndex","onKeyPress","title","NewEventForm","selectedEvent","useState","setTitle","description","setDescription","date","setDate","time","setTime","name","required","placeholder","value","onChange","target","icon","faTrashCan","disabled","newEvent","moment","format","Calendar","today","setToday","setIsFormShown","setSelectedEvent","updateLocale","week","dow","clone","startOf","subtract","daysArray","Array","add","oneDay","month","year","prev","dayItem","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b58fbaf.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  isFormShown: boolean;\n  onFormShown: (isFormShown: boolean) => void;\n  onNextMonth: () => void;\n  onPrevMonth: () => void;\n  onToday: () => void;\n};\n\nexport const CalendarHeader: React.FC<Props> = ({\n  isFormShown,\n  onFormShown,\n  onNextMonth,\n  onPrevMonth,\n  onToday,\n}) => {\n  return (\n    <div className=\"content\">\n      <button\n        type=\"button\"\n        className=\"button is-link is-outlined\"\n        onClick={() => {\n          onFormShown(!isFormShown);\n        }}\n      >\n        +\n      </button>\n\n      <h2 className=\"subtitle is-3\">Month Year</h2>\n\n      <button type=\"button\" className=\"button is-primary is-outlined\" onClick={onToday}>Today</button>\n\n      <button type=\"button\" className=\"button is-primary is-outlined\" onClick={onPrevMonth}>\n        {'<'}\n      </button>\n      <button type=\"button\" className=\"button is-primary is-outlined\" onClick={onNextMonth}>\n        {'>'}\n      </button>\n    </div>\n  );\n};\n","import { CalendarEvent } from '../types/CalendarEvent';\n\nexport const client = {\n  get: () => JSON.parse(localStorage.getItem('events') || '[]'),\n  post: (data: CalendarEvent) => {\n    const events: CalendarEvent[] = client.get();\n\n    localStorage.setItem('events', JSON.stringify([...events, data]));\n  },\n  delete: (eventCreatedDate: string) => {\n    const events: CalendarEvent[] = client.get();\n\n    const newArrayOfevents = events.filter(\n      (event) => event.createdAt !== eventCreatedDate,\n    );\n\n    localStorage.setItem('events', JSON.stringify([newArrayOfevents]));\n  },\n  patch: (newData: CalendarEvent) => {\n    const events: CalendarEvent[] = client.get();\n\n    const currentEvent = events.find(\n      (event) => newData.createdAt === event.createdAt,\n    );\n\n    const newevents = events.filter(\n      (event) => event.createdAt !== currentEvent?.createdAt,\n    );\n\n    localStorage.setItem('events', JSON.stringify([...newevents, newData]));\n  },\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Day } from '../../types/Day';\nimport { CalendarEvent } from '../../types/CalendarEvent';\nimport { getAll } from '../../api/events';\n\ntype Props = {\n  day: Day;\n  // isWeekend: boolean;\n  onFormShown: (isFormShown: boolean) => void;\n  onSelectedEvent: (selectedEvent: CalendarEvent | null) => void;\n};\n\nexport const CalendarDay: React.FC<Props> = ({\n  day,\n  // isWeekend,\n  onFormShown,\n  onSelectedEvent,\n}) => {\n  const { dayNumber, weekNumber } = day;\n\n  const getEvents = () => {\n    const events: CalendarEvent[] = getAll();\n\n    return events;\n  };\n\n  const events = getEvents();\n\n  const currentEvents = events.filter((event) => day.id === event.createdAt);\n\n  return (\n    <article\n      className={classNames('calendar__cell', {\n        // 'is-weekend': isWeekend === true,\n      })}\n    >\n      <div className=\"cell__row\">\n        <p className=\"week__number\">{weekNumber}</p>\n        <p className=\"day__number\">{dayNumber}</p>\n        <div className=\"box\">\n          {currentEvents.map((event) => (\n            <span\n              aria-label=\"Save\"\n              role=\"textbox\"\n              key={event.createdAt}\n              tabIndex={0}\n              onClick={() => {\n                onFormShown(true);\n                onSelectedEvent(event);\n              }}\n              onKeyPress={() => {\n                onFormShown(true);\n                onSelectedEvent(event);\n              }}\n            >\n              {event.title}\n            </span>\n          ))}\n        </div>\n      </div>\n    </article>\n  );\n};\n","import { CalendarEvent } from '../types/CalendarEvent';\nimport { client } from '../utils/fetchClient';\n\nexport function getAll() {\n  return client.get();\n}\n\nexport function addOne(data: CalendarEvent) {\n  return client.post(data);\n}\n\nexport function deleteOne(eventCreatedDate: string) {\n  return client.delete(eventCreatedDate);\n}\n\nexport function updateOne(newData: CalendarEvent) {\n  return client.patch(newData);\n}\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashCan } from '@fortawesome/free-regular-svg-icons';\nimport { addOne, updateOne } from '../../api/events';\nimport { CalendarEvent } from '../../types/CalendarEvent';\n\ntype Props = {\n  selectedEvent: CalendarEvent | null;\n  onFormShown: (isFormShown: boolean) => void;\n};\n\nexport const NewEventForm: React.FC<Props> = ({\n  selectedEvent,\n  onFormShown,\n}) => {\n  const [title, setTitle] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [date, setDate] = useState<string>('');\n  const [time, setTime] = useState<string>('');\n\n  const handleSubmit = () => {\n    const newEvent: CalendarEvent = {\n      createdAt: moment().format('DD.MM.YYYY HH:MM'),\n      title,\n      description,\n      date,\n      time,\n    };\n\n    if (!selectedEvent) {\n      addOne(newEvent);\n    } else {\n      updateOne({\n        ...selectedEvent,\n        title,\n        date,\n        time,\n        description,\n      });\n    }\n\n    onFormShown(false);\n  };\n\n  return (\n    <form className=\"event__form\">\n      <div className=\"event__title\">\n        <h2 className=\"subtitle is-3\">Add new idea item</h2>\n        {selectedEvent && <p>{`Created at ${selectedEvent?.createdAt}`}</p>}\n\n        <button\n          onClick={() => onFormShown(false)}\n          type=\"button\"\n          className=\"event__close-form\"\n        >\n          X\n        </button>\n      </div>\n\n      <h3 className=\"subtitle is-4\">Title*</h3>\n\n      <input\n        name=\"title\"\n        required\n        placeholder=\"Title goes here\"\n        value={title}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => setTitle(event.target.value)}\n      />\n\n      <input\n        name=\"description\"\n        placeholder=\"Description\"\n        value={description}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => (\n          setDescription(event.target.value)\n        )}\n        // disabled={isAdding}\n      />\n\n      <input\n        type=\"date\"\n        required\n        className=\"event__dateField\"\n        value={date}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => setDate(event.target.value)}\n      />\n\n      <input\n        type=\"time\"\n        required\n        className=\"event__timeField\"\n        value={date}\n        onChange={(event) => setTime(event.target.value)}\n      />\n\n      {selectedEvent && (\n        <button\n          aria-label=\"Save\"\n          type=\"submit\"\n          className=\"button is-danger is-outlined\"\n          // onClick={() => deleteOne(selectedEvent?.createdAt)}\n        >\n          <FontAwesomeIcon icon={faTrashCan} />\n        </button>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"button is-success is-outlined\"\n        disabled={!title || !date}\n        onClick={handleSubmit}\n      >\n        Save\n      </button>\n    </form>\n  );\n};\n","/* eslint-disable react/no-array-index-key */\nimport React, { useState } from 'react';\nimport moment, { Moment } from 'moment';\nimport { Day } from '../../types/Day';\nimport { CalendarEvent } from '../../types/CalendarEvent';\n\nimport { CalendarHeader } from '../CalendarHeader';\nimport { CalendarDay } from '../CalendarDay';\nimport { NewEventForm } from '../NewEventForm';\n\nexport const Calendar: React.FC = () => {\n  const [today, setToday] = useState<Moment>(moment());\n  // const [year, setYear] = useState<Moment>(moment());\n  // const [month, setMonth] = useState<Moment>(moment());\n  // const [selectedDay, setSelectedDay] = useState<Day | null>(null);\n  const [isFormShown, setIsFormShown] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n\n  moment.updateLocale('en', { week: { dow: 1 } });\n  const startDay: Moment = moment().clone().startOf('month').startOf('week');\n  const day: Moment = startDay.clone().subtract(1, 'day');\n  const totalDays = 42;\n  const totalDaysArray: Moment[] = [...Array(totalDays)]\n    .map(() => day.add(1, 'day').clone());\n\n  const daysArray: Day[] = totalDaysArray.map(oneDay => ({\n    id: moment(oneDay).format('DDMMYYYY'),\n    date: `${moment(oneDay).format('YYYY')}-${moment(oneDay).format('MM')}-${moment(oneDay).format('DD')}`,\n    dayNumber: moment(oneDay).format('D'),\n    weekNumber: moment(oneDay).format('dd'),\n    month: moment(oneDay).format('M'),\n    year: moment(oneDay).format('YYYY'),\n  }));\n  // const isCurrentDay = (dayCell: Day) => {\n  //   return (\n  //     moment().format('YYYY M D')\n  //     === `${dayCell.year} ${dayCell.month} ${dayCell.numberOfDay}`\n  //   );\n  // };\n\n  const handlePrevMonth = () => setToday((prev) => prev.clone().subtract(1, 'month'));\n  const handleToday = () => setToday(moment());\n  const handleNextMonth = () => setToday((prev) => prev.clone().add(1, 'month'));\n\n  // const [method, setMethod] = useState(null);\n  // const [event, setEvent] = useState(null);\n\n  // const [events, setEvents] = useState([]);\n  // const startDayQuery = startDay.clone().format('X');\n  // const endDayQuery = startDay.clone().add(totalDays, 'days').format('X');\n\n  // const openFormHandler = (methodName, eventForUpdate, dayItem) => {\n  //   setEvent(eventForUpdate || { ...defaultEvent, date: dayItem.format('X') });\n  //   setMethod(methodName);\n  // };\n\n  // const openModalFormHandler = (methodName, eventForUpdate, dayItem) => {\n  //   setShowForm(true);\n  //   openFormHandler(methodName, eventForUpdate, dayItem);\n  // };\n\n  // const cancelButtonHandler = () => {\n  //   setShowForm(false);\n  //   setEvent(null);\n  // };\n\n  // const changeEventHandler = (text, field) => {\n  //   setEvent((prevState) => ({\n  //     ...prevState,\n  //     [field]: text,\n  //   }));\n  // };\n\n  // const endDay: Moment = moment().endOf('month').endOf('week');\n\n  // const calendar: Moment[] = [];\n\n  // while (!day.isAfter(endDay)) {\n  //   calendar.push(day.clone());\n  //   day.add(1, 'day');\n  // }\n\n  return (\n    <section className=\"section\">\n      <div className=\"calendar__container\">\n        <div className=\"calendar__header\">\n          <h1 className=\"title is-1\">Welcome to my calendar app!</h1>\n          <CalendarHeader\n            isFormShown={isFormShown}\n            onFormShown={setIsFormShown}\n            onNextMonth={handleNextMonth}\n            onPrevMonth={handlePrevMonth}\n            onToday={handleToday}\n          />\n        </div>\n\n        <div className=\"calendar__body\">\n          {isFormShown && (\n            <NewEventForm\n              selectedEvent={selectedEvent}\n              onFormShown={setIsFormShown}\n            />\n          )}\n\n          {daysArray.map((dayItem) => (\n            <CalendarDay\n              key={dayItem.id}\n              day={dayItem}\n              // isWeekend={dayItem.day() === 6 || dayItem.day() === 0}\n              onFormShown={setIsFormShown}\n              onSelectedEvent={setSelectedEvent}\n            />\n          ))}\n          <p>{today.format('DD-MMMM-YYYY')}</p>\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport './App.scss';\n\nimport { Calendar } from './components/Calendar';\n\nexport const App: React.FC = () => {\n  return (\n    <main className=\"main\">\n      <div className=\"main__container\">\n        <Calendar />\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}